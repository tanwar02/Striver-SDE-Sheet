import java.util.* ;
import java.io.*; 
public class Solution {
    
    public static long getInversions(long arr[], int n) {
        
        return mergeSort(arr, 0, n-1);
    }
    private static long mergeSort(long[] arr, int low, int high){
        
        if(low >= high) return 0;
        int mid = (low+high)/2;
        return mergeSort(arr, low, mid) + mergeSort(arr, mid+1, high) + merge(arr, low, mid, high);
    }
    private static long merge(long[] arr, int low, int mid, int high){
        
        int n1 = mid-low+1, n2 = high-mid;
        long[] left = new long[n1];
        long[] right = new long[n2];
        for(int i=0; i<n1; i++) left[i] = arr[i+low];
        for(int i=0; i<n2; i++) right[i] = arr[i+mid+1];
        long count = 0;
        int i=0, j=0, k=low;
        while(i<n1 && j<n2){
            
            if(left[i] > right[j]){
                
                arr[k] = left[i];
                i++;
                k++;
                count += n2-j;
            }
            else{
                
                arr[k] = right[j];
                j++;
                k++;
            }
        }
        while(i<n1){
            
            arr[k] = left[i];
            i++;
            k++;
        }
        while(j<n2){
            
            arr[k] = right[j];
            j++;
            k++;
        }
        return count;
    }
}
