/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.*;

public class Solution {
    
    private static int time;
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) {
        
        time = 0;
        Queue<int[]> pq = new PriorityQueue<>((a, b)->{
            if(a[1] == b[1] && a[2] == b[2]) return a[3]-b[3];
            if(a[1] == b[1]) return a[2]-b[2];
            return a[1]-b[1];
        });
        dfs(root, pq, 0, 0);
        
        ArrayList<Integer> list = new ArrayList<>();
        
        while(!pq.isEmpty()){
            
            list.add(pq.poll()[0]);
        }
        return list;
    }
    private static void dfs(TreeNode<Integer> root, Queue<int[]> pq, int dis, int level){
        
        if(root == null) return;
        pq.add(new int[]{root.data, dis, level, time});
        time += 1;
        dfs(root.left, pq, dis-1, level+1);
        dfs(root.right, pq, dis+1, level+1);
    }
}
